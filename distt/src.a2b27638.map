{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/PhysicalKeyboard.js","services/KeyboardLayout.js","services/Utilities.js","components/Keyboard.js","index.js","src/index.js","node_modules/parcel-bundler/src/builtins/bundle-url.js","node_modules/parcel-bundler/src/builtins/css-loader.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PhysicalKeyboard","simpleKeyboardInstance","_classCallCheck","this","initKeyboardListener","getSimpleKeyboardLayoutKey","_this","document","addEventListener","event","options","physicalKeyboardHighlight","buttonPressed","dispatch","instance","buttonDOM","getButtonElement","concat","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","output","code","includes","toUpperCase","Number","isInteger","length","toLowerCase","KeyboardLayout","default","shift","Utilities","Utilities_classCallCheck","getButtonClass","getButtonDisplayName","getUpdatedInput","updateCaretPos","updateCaretPosAction","isMaxLengthReached","camelCase","countInArray","button","buttonTypeClass","buttonWithoutBraces","replace","buttonNormalized","{bksp}","{backspace}","{enter}","{shift}","{shiftleft}","{shiftright}","{alt}","{s}","{tab}","{lock}","{capslock}","{accept}","{space}","{//}","{esc}","{escape}","{f1}","{f2}","{f3}","{f4}","{f5}","{f6}","{f7}","{f8}","{f9}","{f10}","{f11}","{f12}","{numpaddivide}","{numlock}","{arrowup}","{arrowleft}","{arrowdown}","{arrowright}","{prtscr}","{scrolllock}","{pause}","{insert}","{home}","{pageup}","{delete}","{end}","{pagedown}","{numpadmultiply}","{numpadsubtract}","{numpadadd}","{numpadenter}","{period}","{numpaddecimal}","{numpad0}","{numpad1}","{numpad2}","{numpad3}","{numpad4}","{numpad5}","{numpad6}","{numpad7}","{numpad8}","{numpad9}","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","minus","newCaretPos","syncInstanceInputs","caretPosition","debug","console","log","keyboardDOMClass","source","string","position","slice","join","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","trim","split","reduce","word","array","x","SimpleKeyboard","Keyboard_classCallCheck","_defineProperty","option","render","initCallback","prop","keys","keyboardDOMQuery","arguments","undefined","Keyboard_typeof","utilities","keyboardDOM","querySelector","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","handleButtonClicked","clearInput","getInput","setInput","replaceInput","clear","addButtonTheme","removeButtonTheme","handleCaret","caretEventHandler","onInit","onRender","loadModules","handleButtonMouseUp","handleButtonMouseDown","handleButtonHold","onModulesLoaded","buttonElements","warn","Error","physicalKeyboardInterface","onKeyPress","handleMaxLength","onChange","e","_this2","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","setTimeout","_this3","_this4","innerHTML","className","callback","forEach","buttons","_this5","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","_this6","Array","isArray","index","filteredButtonArray","filter","item","splice","buttonArr","simpleKeyboardInstances","targetTagName","target","tagName","disableCaretPositioning","selectionStart","_this7","Module","constructor","classStr","init","_this8","layoutClass","layout","getDefaultLayout","useTouchEvents","buttonThemesParsed","themeObj","themeButtons","themeButton","themeParsed","row","rIndex","rowArray","rowDOM","createElement","bIndex","fctBtnClass","buttonThemeClass","buttonDisplayName","ontouchstart","ontouchend","ontouchcancel","onclick","onmousedown","preventDefault","setAttribute","buttonUID","buttonSpanDOM","appendChild","initialized","onmouseup","keyboard","Keyboard","handleNumbers","currentLayout","numbersToggle","setOptions","bundleURL","getBundleURLCached","getBundleURL","err","matches","stack","getBaseURL","url","bundle","require","updateLink","link","newLink","cloneNode","onload","remove","href","Date","now","parentNode","insertBefore","nextSibling","cssTimeout","reloadCSS","links","querySelectorAll"],"mappings":"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","file":"src.a2b27638.map","sourceRoot":"..","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor(simpleKeyboardInstance){\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    this.initKeyboardListener = this.initKeyboardListener.bind(this);\r\n    this.getSimpleKeyboardLayoutKey = this.getSimpleKeyboardLayoutKey.bind(this);\r\n\r\n    /**\r\n     * Initialize key listeners\r\n     */\r\n    this.initKeyboardListener();\r\n  }\r\n\r\n  /**\r\n   * Initializes key event listeners\r\n   */\r\n  initKeyboardListener(){\r\n    // Adding button style on keydown\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\r\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n        this.simpleKeyboardInstance.dispatch(instance => {\r\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n          if(buttonDOM){\r\n            buttonDOM.style.backgroundColor = this.simpleKeyboardInstance.options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\r\n            buttonDOM.style.color = this.simpleKeyboardInstance.options.physicalKeyboardHighlightTextColor || \"white\";\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Removing button style on keyup\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\r\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n        this.simpleKeyboardInstance.dispatch(instance => {\r\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n          if(buttonDOM && buttonDOM.removeAttribute){\r\n            buttonDOM.removeAttribute(\"style\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event){\r\n    let output;\r\n\r\n    if(\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ){\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" && Number.isInteger(Number(event.code[1])) && event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;","/**\r\n * Keyboard Layout Service\r\n */\r\nclass KeyboardLayout {\r\n  /**\r\n   * Get default simple-keyboard layout\r\n   * @return {object} The default layout (US-QWERTY)\r\n   */\r\n  static getDefaultLayout(){\r\n    return {\r\n      'default': [\r\n        '` 1 2 3 4 5 6 7 8 9 0 - = {bksp}',\r\n        '{tab} q w e r t y u i o p [ ] \\\\',\r\n        '{lock} a s d f g h j k l ; \\' {enter}',\r\n        '{shift} z x c v b n m , . / {shift}',\r\n        '.com @ {space}'\r\n      ],\r\n      'shift': [\r\n        '~ ! @ # $ % ^ & * ( ) _ + {bksp}',\r\n        '{tab} Q W E R T Y U I O P { } |',\r\n        '{lock} A S D F G H J K L : \" {enter}',\r\n        '{shift} Z X C V B N M < > ? {shift}',\r\n        '.com @ {space}'\r\n      ]\r\n    } \r\n  }\r\n}\r\n\r\nexport default KeyboardLayout;","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor(simpleKeyboardInstance){\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    this.getButtonClass = this.getButtonClass.bind(this);\r\n    this.getButtonDisplayName = this.getButtonDisplayName.bind(this);\r\n    this.getUpdatedInput = this.getUpdatedInput.bind(this);\r\n    this.updateCaretPos = this.updateCaretPos.bind(this);\r\n    this.updateCaretPosAction = this.updateCaretPosAction.bind(this);\r\n    this.isMaxLengthReached = this.isMaxLengthReached.bind(this);\r\n    this.camelCase = this.camelCase.bind(this);\r\n    this.countInArray = this.countInArray.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button){\r\n    let buttonTypeClass = (button.includes(\"{\") && button.includes(\"}\") && button !== '{//}') ? \"functionBtn\" : \"standardBtn\";\r\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = '';\r\n\r\n    if(buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay(){\r\n    return {\r\n      '{bksp}': 'backspace',\r\n      '{backspace}': 'backspace',\r\n      '{enter}': '< enter',\r\n      '{shift}': 'shift',\r\n      '{shiftleft}': 'shift',\r\n      '{shiftright}': 'shift',\r\n      '{alt}': 'alt',\r\n      '{s}': 'shift',\r\n      '{tab}': 'tab',\r\n      '{lock}': 'caps',\r\n      '{capslock}': 'caps',\r\n      '{accept}': 'Submit',\r\n      '{space}': ' ',\r\n      '{//}': ' ',\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      '{numpaddivide}': '/',\r\n      '{numlock}': 'lock',\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay){\r\n    if(mergeDisplay){\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  \r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {object} options The simple-keyboard options object\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button, input, options, caretPos, moveCaret){\r\n    \r\n    let output = input;\r\n\r\n    if((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0){\r\n      output = this.removeAt(output, caretPos, moveCaret);\r\n\r\n    } else if(button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\r\n\r\n    else if(button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)){\r\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\r\n\r\n    } else if((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\r\n\r\n    else if(button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))){\r\n      output = this.addStringAt(output, button[button.length - 2], caretPos, moveCaret);\r\n    }\r\n    else if(button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, '/', caretPos, moveCaret);\r\n\r\n    else if(button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, '*', caretPos, moveCaret);\r\n\r\n    else if(button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, '-', caretPos, moveCaret);\r\n\r\n    else if(button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, '+', caretPos, moveCaret);\r\n\r\n    else if(button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, '.', caretPos, moveCaret);\r\n\r\n    else if(button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n\r\n    else if(!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   * \r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus){\r\n    let newCaretPos = this.updateCaretPosAction(this.simpleKeyboardInstance, length, minus);\r\n\r\n    if(this.simpleKeyboardInstance.options.syncInstanceInputs){\r\n      this.simpleKeyboardInstance.dispatch(instance => {\r\n        instance.caretPosition = newCaretPos;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   * \r\n   * @param  {object} instance The instance whose position should be updated\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(instance, length, minus){\r\n    if(minus){\r\n      if(instance.caretPosition > 0)\r\n      instance.caretPosition = instance.caretPosition - length;\r\n    } else {\r\n      instance.caretPosition = instance.caretPosition + length;\r\n    }\r\n\r\n    if(this.simpleKeyboardInstance.options.debug){\r\n      console.log(\"Caret at:\", instance.caretPosition, `(${instance.keyboardDOMClass})`);\r\n    }\r\n\r\n    return instance.caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   * \r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source, string, position, moveCaret){\r\n    let output;\r\n\r\n    if(!position && position !== 0){\r\n      output = source + string;\r\n    } else {\r\n      output = [source.slice(0, position), string, source.slice(position)].join('');\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if(!this.isMaxLengthReached()){\r\n        if(moveCaret) this.updateCaretPos(string.length);\r\n      }\r\n\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   * \r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source, position, moveCaret){\r\n    if(this.simpleKeyboardInstance.caretPosition === 0){\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n    let prevTwoChars;\r\n    let emojiMatched;\r\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n    /**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */\r\n    if(position && position >= 0){\r\n      prevTwoChars = source.substring(position - 2, position)\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if(emojiMatched){\r\n        output = source.substr(0, (position - 2)) + source.substr(position);\r\n        if(moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.substr(0, (position - 1)) + source.substr(position);\r\n        if(moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    } else {\r\n      prevTwoChars = source.slice(-2);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if(emojiMatched){\r\n        output = source.slice(0, -2);\r\n        if(moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.slice(0, -1);\r\n        if(moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   * \r\n   * @param  {object} inputObj\r\n   * @param  {object} options\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, options, updatedInput){\r\n    let maxLength = options.maxLength;\r\n    let currentInput = inputObj[options.inputName];\r\n    let condition = currentInput.length === maxLength;\r\n\r\n    if(\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ){\r\n      return false;\r\n    }\r\n\r\n    if(Number.isInteger(maxLength)){\r\n      if(options.debug){\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if(condition){\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if(typeof maxLength === \"object\"){\r\n      let condition = currentInput.length === maxLength[options.inputName];\r\n\r\n      if(options.debug){\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if(condition){\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached(){\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   * \r\n   * @param  {string} string The string to transform.\r\n   */\r\n  camelCase(string){\r\n    return string.toLowerCase().trim().split(/[.\\-_\\s]/g).reduce((string, word) => string + word[0].toUpperCase() + word.slice(1));\r\n  };\r\n\r\n  /**\r\n   * Counts the number of duplicates in a given array\r\n   * \r\n   * @param  {Array} array The haystack to search in\r\n   * @param  {string} value The needle to search for\r\n   */\r\n  countInArray(array, value){\r\n    return array.reduce((n, x) => n + (x === value), 0);\r\n  }\r\n}\r\n\r\nexport default Utilities;","import './Keyboard.css';\r\n\r\n// Services\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport KeyboardLayout from '../services/KeyboardLayout';\r\nimport Utilities from '../services/Utilities';\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params){\r\n    let keyboardDOMQuery = typeof params[0] === \"string\" ? params[0] : '.simple-keyboard';\r\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\r\n\r\n    if(!options)\r\n      options = {};\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities(this);\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n    this.options.preventMouseDownDefault = this.options.preventMouseDownDefault || false;\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    this.handleButtonClicked = this.handleButtonClicked.bind(this);\r\n    this.syncInstanceInputs = this.syncInstanceInputs.bind(this);\r\n    this.clearInput = this.clearInput.bind(this);\r\n    this.getInput = this.getInput.bind(this);\r\n    this.setInput = this.setInput.bind(this);\r\n    this.replaceInput = this.replaceInput.bind(this);\r\n    this.clear = this.clear.bind(this);\r\n    this.dispatch = this.dispatch.bind(this);\r\n    this.addButtonTheme = this.addButtonTheme.bind(this);\r\n    this.removeButtonTheme = this.removeButtonTheme.bind(this);\r\n    this.getButtonElement = this.getButtonElement.bind(this);\r\n    this.handleCaret = this.handleCaret.bind(this);\r\n    this.caretEventHandler = this.caretEventHandler.bind(this);\r\n    this.onInit = this.onInit.bind(this);\r\n    this.onRender = this.onRender.bind(this);\r\n    this.render = this.render.bind(this);\r\n    this.loadModules = this.loadModules.bind(this);\r\n    this.handleButtonMouseUp = this.handleButtonMouseUp.bind(this);\r\n    this.handleButtonMouseDown = this.handleButtonMouseDown.bind(this);\r\n    this.handleButtonHold = this.handleButtonHold.bind(this);\r\n    this.onModulesLoaded = this.onModulesLoaded.bind(this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * let input = keyboard.getInput();\r\n     * \r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     * \r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMQuery.split('.').join(\"\");\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if(this.keyboardDOM)\r\n      this.render();\r\n    else {\r\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Saving instance\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if(!window['SimpleKeyboardInstances'])\r\n      window['SimpleKeyboardInstances'] = {};\r\n      \r\n    window['SimpleKeyboardInstances'][this.utilities.camelCase(this.keyboardDOMClass)] = this;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboardInterface = new PhysicalKeyboard(this);\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button){\r\n    let debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if(button === '{//}')\r\n      return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if(typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n    \r\n    if(!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = '';\r\n\r\n    let updatedInput = this.utilities.getUpdatedInput(\r\n      button, this.input[this.options.inputName], this.options, this.caretPosition\r\n    );\r\n\r\n    if(this.input[this.options.inputName] !== updatedInput){\r\n\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if(this.options.maxLength && this.utilities.handleMaxLength(this.input, this.options, updatedInput)){\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName]  = this.utilities.getUpdatedInput(\r\n        button, this.input[this.options.inputName], this.options, this.caretPosition, true\r\n      );\r\n\r\n      if(debug)\r\n        console.log('Input changed:', this.input);\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if(this.options.syncInstanceInputs)\r\n        this.syncInstanceInputs(this.input);\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if(typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.input[this.options.inputName]);\r\n    }\r\n    \r\n    if(debug){\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button, e){\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.isMouseHold = true;\r\n\r\n    if(this.holdInteractionTimeout)\r\n      clearTimeout(this.holdInteractionTimeout);\r\n\r\n    if(this.holdTimeout)\r\n      clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    this.holdTimeout = setTimeout(() => {\r\n      if(\r\n        this.isMouseHold  &&\r\n        (\r\n          (!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n          button === \"{bksp}\" ||\r\n          button === \"{space}\" ||\r\n          button === \"{tab}\"\r\n        )\r\n      ){\r\n        if(this.options.debug)\r\n          console.log(\"Button held:\", button);\r\n\r\n        this.handleButtonHold(button, e);\r\n      }\r\n      clearTimeout(this.holdTimeout);\r\n    }, 500);\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(){\r\n    this.isMouseHold = false;\r\n    if(this.holdInteractionTimeout)\r\n      clearTimeout(this.holdInteractionTimeout);\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button){\r\n    if(this.holdInteractionTimeout)\r\n      clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = setTimeout(() => {\r\n      if(this.isMouseHold){\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(){\r\n    this.dispatch((instance) => {\r\n      instance.replaceInput(this.input);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName){\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if(this.options.syncInstanceInputs)\r\n      this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName){\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if(this.options.syncInstanceInputs)\r\n      this.syncInstanceInputs(this.input);\r\n\r\n    return this.input[this.options.inputName];\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName){\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if(this.options.syncInstanceInputs)\r\n      this.syncInstanceInputs(this.input);\r\n  }\r\n  \r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj){\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization. \r\n   * @param  {object} option The option to set\r\n   */\r\n  setOptions = option => {\r\n    option = option || {};\r\n    this.options = Object.assign(this.options, option);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used interally between re-renders.\r\n   */\r\n  clear(){\r\n    this.keyboardDOM.innerHTML = '';\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback){\r\n    if(!window['SimpleKeyboardInstances']){\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n    \r\n    return Object.keys(window['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback(window['SimpleKeyboardInstances'][key], key);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className){\r\n    if(!className || !buttons)\r\n      return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if(!this.options.buttonTheme)\r\n          this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n  \r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n\r\n          if(buttonTheme.class.split(\" \").includes(classNameItem)){\r\n            classNameFound = true;\r\n            \r\n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if(!buttonThemeArray.includes(button)){\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if(!classNameFound){\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className){\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if(!buttons && !className){\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if(buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length){\r\n      let buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button, key) => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if(\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ){\r\n            let filteredButtonArray = buttonTheme.buttons.split(\" \").filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if(filteredButtonArray.length){\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n \r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button){\r\n    let output;\r\n\r\n    let buttonArr = this.buttonElements[button];\r\n    if(buttonArr){\r\n      if(buttonArr.length > 1){\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current cursor position within a input or textarea (if any)\r\n   */\r\n  handleCaret(){\r\n    /**\r\n     * Only first instance should insall the caret handling events\r\n     */\r\n    this.caretPosition = null;\r\n    let simpleKeyboardInstances = window['SimpleKeyboardInstances'];\r\n\r\n    if(\r\n      (\r\n        simpleKeyboardInstances &&\r\n        Object.keys(simpleKeyboardInstances)[0] === this.utilities.camelCase(this.keyboardDOMClass)\r\n      ) ||\r\n      !simpleKeyboardInstances\r\n    ){\r\n    if(this.options.debug){\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`)\r\n    }\r\n\r\n    document.addEventListener(\"keyup\", this.caretEventHandler);\r\n    document.addEventListener(\"mouseup\", this.caretEventHandler);\r\n    document.addEventListener(\"touchend\", this.caretEventHandler);\r\n  }\r\n  }\r\n\r\n  /**\r\n   * Called by {@link handleCaret} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event){\r\n    let targetTagName;\r\n    if(event.target.tagName){\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch(instance => {\r\n      if(instance.isMouseHold){\r\n        instance.isMouseHold = false;\r\n    }\r\n\r\n    if(\r\n      (targetTagName === \"textarea\" ||\r\n      targetTagName === \"input\") &&\r\n        !instance.options.disableCaretPositioning\r\n    ){\r\n      /**\r\n       * Tracks current cursor position\r\n       * As keys are pressed, text will be added/removed at that position within the input.\r\n       */\r\n        instance.caretPosition = event.target.selectionStart;\r\n\r\n        if(instance.options.debug){\r\n          console.log('Caret at: ', event.target.selectionStart, event.target.tagName.toLowerCase(), `(${instance.keyboardDOMClass})`);\r\n      }     \r\n    }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit(){\r\n    if(this.options.debug){\r\n      console.log(`${this.keyboardDOMClass} Initialized`)\r\n    }\r\n\r\n    /**\r\n     * Caret handling\r\n     */\r\n    this.handleCaret();\r\n\r\n    if(typeof this.options.onInit === \"function\")\r\n      this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender(){\r\n    if(typeof this.options.onRender === \"function\")\r\n      this.options.onRender();\r\n  }\r\n\r\n /**\r\n  * Executes the callback function once all modules have been loaded\r\n  */\r\n  onModulesLoaded(){\r\n    if(typeof this.options.onModulesLoaded === \"function\")\r\n      this.options.onModulesLoaded();\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    if(!this.modules[name])\r\n      this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  }\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules(){\r\n    if(Array.isArray(this.options.modules)){\r\n      this.options.modules.forEach(Module => {\r\n        let module = new Module();\r\n\r\n        /* istanbul ignore next */\r\n        if(module.constructor.name && module.constructor.name !== \"Function\"){\r\n          let classStr = `module-${this.utilities.camelCase(module.constructor.name)}`;\r\n          this.keyboardPluginClasses = this.keyboardPluginClasses + ` ${classStr}`;\r\n        }\r\n\r\n        module.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = this.keyboardPluginClasses + ' modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp = (name, prop) => {\r\n    if(!this.modules[name])\r\n      return false;\r\n    \r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList = () => {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render(){\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    let layoutClass = this.options.layout ? \"hg-layout-custom\" : `hg-layout-${this.options.layoutName}`;\r\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\r\n    let useTouchEvents = this.options.useTouchEvents || false\r\n\r\n    /**\r\n     * Account for buttonTheme, if set\r\n     */\r\n    let buttonThemesParsed = {};\r\n    if(Array.isArray(this.options.buttonTheme)){\r\n      this.options.buttonTheme.forEach(themeObj => {\r\n        if(themeObj.buttons && themeObj.class){\r\n          let themeButtons;\r\n\r\n          if(typeof themeObj.buttons === \"string\"){\r\n            themeButtons = themeObj.buttons.split(' ');\r\n          }\r\n\r\n          if(themeButtons){\r\n            themeButtons.forEach(themeButton => {\r\n              let themeParsed = buttonThemesParsed[themeButton];\r\n\r\n              // If the button has already been added\r\n              if(themeParsed){\r\n                // Making sure we don't add duplicate classes, even when buttonTheme has duplicates\r\n                if(!this.utilities.countInArray(themeParsed.split(\" \"), themeObj.class)){\r\n                  buttonThemesParsed[themeButton] = `${themeParsed} ${themeObj.class}`;\r\n                }\r\n              } else {\r\n                buttonThemesParsed[themeButton] = themeObj.class;\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          console.warn(`buttonTheme row is missing the \"buttons\" or the \"class\". Please check the documentation.`)\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass} ${this.keyboardPluginClasses}`;\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      var rowDOM = document.createElement('div');\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        let fctBtnClass = this.utilities.getButtonClass(button);\r\n        let buttonThemeClass = buttonThemesParsed[button];\r\n        let buttonDisplayName = this.utilities.getButtonDisplayName(button, this.options.display, this.options.mergeDisplay);\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        var buttonDOM = document.createElement('div');\r\n        buttonDOM.className += `hg-button ${fctBtnClass}${buttonThemeClass ? \" \"+buttonThemeClass : \"\"}`;\r\n        \r\n        if (useTouchEvents) {\r\n          buttonDOM.ontouchstart = (e) => {\r\n            this.handleButtonClicked(button);\r\n            this.handleButtonMouseDown(button, e);\r\n          }\r\n          buttonDOM.ontouchend = e => this.handleButtonMouseUp();\r\n          buttonDOM.ontouchcancel = e => this.handleButtonMouseUp();\r\n        } else {\r\n          buttonDOM.onclick = () => {\r\n            this.isMouseHold = false;\r\n            this.handleButtonClicked(button);\r\n          }\r\n          buttonDOM.onmousedown = (e) => {\r\n            if (this.options.preventMouseDownDefault) e.preventDefault();\r\n            this.handleButtonMouseDown(button, e);\r\n          }\r\n        }\r\n        \r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding display label\r\n         */\r\n        buttonDOM.setAttribute(\"data-displayLabel\", buttonDisplayName);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        var buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if(!this.buttonElements[button])\r\n          this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n\r\n      });\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if(!this.initialized){\r\n      /**\r\n       * Ensures that onInit is only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling mouseup\r\n       */\r\n      if (!useTouchEvents) {\r\n        document.onmouseup = () => this.handleButtonMouseUp();\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from './components/Keyboard';\r\nexport default SimpleKeyboard;\r\n","import Keyboard from 'simple-keyboard';\nimport 'simple-keyboard/build/css/index.css';\nimport './index.css';\n\nlet keyboard = new Keyboard({\n  onChange: (input) => onChange(input),\n  onKeyPress: (button) => onKeyPress(button),\n  mergeDisplay: true,\n  layoutName: 'default',\n  layout: {\n    default: ['1 2 3', '4 5 6', '7 8 9', '0 {backspace}'],\n  },\n  display: {\n    '{numbers}': '123',\n    '{backspace}': '⌫',\n  },\n});\n\n/**\n * Update simple-keyboard when input is changed directly\n */\ndocument.querySelector('.input').addEventListener('input', (event) => {\n  keyboard.setInput(event.target.value);\n});\n\nconsole.log(keyboard);\n\nfunction onChange(input) {\n  document.querySelector('.input').value = input;\n  console.log('Input changed', input);\n}\n\nfunction onKeyPress(button) {\n  console.log('Button pressed', button);\n\n  /**\n   * If you want to handle the shift and caps lock buttons\n   */\n  if (button === '{numbers}') handleNumbers();\n}\n\nfunction handleNumbers() {\n  let currentLayout = keyboard.options.layoutName;\n  let numbersToggle = currentLayout !== 'default';\n\n  keyboard.setOptions({\n    layoutName: numbersToggle,\n  });\n}\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n"]}